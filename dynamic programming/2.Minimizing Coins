
   // https://cses.fi/problemset/task/1634
   
 #include<bits/stdc++.h> 
#define int long long
#define vi vector<int>
#define vii vector<vi>
#define pii pair<int,int>
#define rep(i,a,b) for(int i=a; i<b; i++)
#define rrep(i,a,b) for(int i=a; i>=b; i--)
#define pb(i) push_back(i)
#define all(b) b.begin(),b.end()
 
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
using namespace std;
// template<class T> using oset =tree<T, null_type, less_equal<T>, rb_tree_tag,tree_order_statistics_node_update> ;
// st.find_by_order(k); // returns element at position k(0 based indexing)
// st.find_of_key(k); // number of element <k
// st.order_of_key(k); // return order of k 
// less_equal<T> : as multiset
// less<T>      :  only set
 
const int mod = 1e9 + 7;
const int inf = 1e10 + 20;
const int mxn = 1e6 + 5;
 
   
vector<int> dp;
int solve(vector<int>&v,int n,int val){
    if(val == 0) return 0;
    else if(dp[val] != -1)
        return dp[val];
    int ans = inf;
    for(int i=0; i<n; i++){
        if(v[i] <=val){
            ans = min(ans, 1 + solve(v,n,val - v[i]));
        }
    }
    return dp[val] = ans;
}
void test_case(){
    int n,x; cin>>n>>x;
    vector<int> v(n,0);
    for(int i=0; i<n; i++)
        cin>>v[i];
 
    // dp.assign(x + 1,-1);
    // int val = solve(v,n,x);    // top down approach 
    // if(val == inf) cout<<-1;
    // else cout<<val;
 
    vector<int> dp(x + 1, inf);   // buttom up approach 
    dp[0] = 0;
    for(int i=0; i<n; i++){
        for(int j=1; j<=x; j++){
            if(j - v[i] >=0){
                dp[j] = min(dp[j], dp[j - v[i]] + 1);
            }
        }
    }
    if(dp[x]==inf) cout<<-1;
    else cout<<dp[x];
}
signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
 
    int t = 1;  //cin>>t;
    while(t--){
        test_case();
        cout<<'\n';
    }
    return 0;
}
