 // https://cses.fi/problemset/task/1746
 
 
 
 
#include<bits/stdc++.h>
using namespace std;
int n,m; 
const int mod = 1e9 + 7;
 
vector<vector<int>> dp;
int solve(vector<int>&v,int pos,int prev){
  if(pos >=n ) return 1;
  if(prev > m) return 0;
  // if(pos && v[pos] && abs(prev - v[pos]) > 1) return 0;  
  else if(dp[pos][prev] != -1)
    return dp[pos][prev];
 
 
     // second recursive approach 
  // int ans = 0;
  // if(v[pos] == 0){
  //   int start = 0, end = 0;
  //   if(prev == 0) start = 1, end = m;
  //   else start = max(prev-1,1), end = min(prev+1,m);
  //   for(int i=start; i<=end; i++){
  //     ans += solve(v,pos+1,i);
  //     ans %= mod;
  //   }
  // }
  // else{
  //   ans += solve(v,pos+1,v[pos]);
  //   ans %= mod;
  // }
 
  // return ans;
 
 
       
  //   // first recursive approach 
 
  // int ans = 0;
  // if(pos == 0){
  //   if(v[pos] == 0){
  //     for(int i=1; i<=m; i++){
  //       ans += solve(v,pos+1,i);
  //       ans %= mod;
  //     }
  //   }
  //   else{
  //     ans += solve(v,pos+1,v[0]);
  //     ans %= mod;
  //   }
  // }
  // else{
  //   if(v[pos] == 0){
  //     ans += solve(v,pos+1,prev);
  //     ans %= mod;
  //     if(prev + 1 <= m){
  //       ans += solve(v,pos+1,prev+1);
  //       ans %= mod;
  //     }
  //     if((prev - 1)>0){
  //       ans += solve(v,pos+1,prev-1);
  //       ans %= mod;
  //     }
  //   }
  //   else{
  //     ans += solve(v,pos+1,v[pos]);
  //     ans %= mod;
  //   }
  // }
 
  // return dp[pos][prev] = ans;
 
 
 
 
 
 
 
  // third recursive approach 
    int ans = 0;
  if(pos == 0){
    if(v[pos] == 0){
      for(int i=1; i<=m; i++){
        ans += solve(v,pos+1,i);
        ans %= mod;
      }
    }
    else{
      ans += solve(v,pos+1,v[0]);
      ans %= mod;
    }
  }
  else{
    if(v[pos] == 0){
      ans += solve(v,pos+1,prev);
      ans %= mod;
      if(prev + 1 <= m){
        ans += solve(v,pos+1,prev+1);
        ans %= mod;
      }
      if((prev - 1)>0){
        ans += solve(v,pos+1,prev-1);
        ans %= mod;
      }
    }
    else{
      int val = v[pos];
      if(prev-1== val){
        ans += solve(v,pos+1,val);
        ans %= mod;
      }
      if(prev == val){
        ans += solve(v,pos+1,val);
        ans %= mod;
      }
      if(prev + 1==val){
        ans += solve(v,pos+1,val);
        ans %= mod;
      }
    }
  }
 
  return dp[pos][prev] = ans;
 
}
int main(){
  cin>>n>>m;
  vector<int> v(n,0);
  for(int i=0; i< n; i++){
    cin>>v[i];
  }
 
  dp.assign(n+1,vector<int>(m+1,-1));
  int ans = solve(v,0,0);
  cout<<ans;
 
 
  return 0;
}
 
 
 
// // buttom up approach 
#include<bits/stdc++.h>
using namespace std;
 
const int mod = 1e9 + 7;
int main(){
  int n,m; cin>>n>>m;
  vector<int> v(n,0);
  for(int i=0; i< n; i++)
    cin>> v[i];
 
  vector<vector<int>> dp(n+1,vector<int>(m+1,0));
  if(v[0] > 0){
    dp[0][v[0]] = 1;
  }
  else{
    for(int i=1; i<=m; i++)
      dp[0][i] = 1;
  }
 
  for(int i=1; i<n; i++){
    if(v[i]==0){
      for(int j=1; j<=m; j++){
        for(int k : {j-1,j,j+1}){
          if(k >=1 && k<=m)
            (dp[i][j] += dp[i-1][k]) %=mod;
        }
      }
    }
    else{
      for(int k : {v[i]-1,v[i],v[i] + 1}){
        if(k >= 1 && k <= m){
          (dp[i][v[i]] += dp[i-1][k]) %=mod;
        }
      }
    }
  }
 
  int ans = 0;
  for(int i=1; i<=m; i++){
    (ans += dp[n-1][i]) %= mod;
  }
 
  cout<<ans;
  return 0;
}
